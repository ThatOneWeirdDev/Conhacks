(function(){var container=document.createElement("div");container.style.position="fixed",container.style.top="50%",container.style.left="50%",container.style.transform="translate(-50%, -50%)",container.style.backgroundColor="#fff",container.style.padding="20px",container.style.borderRadius="10px",container.style.boxShadow="0 0 20px rgba(0, 0, 0, 0.1)",container.style.zIndex="9999",container.style.minWidth="280px",container.style.maxWidth="400px",container.style.fontFamily="Arial, sans-serif",container.style.color="#333",container.style.fontSize="16px";var header=document.createElement("div");header.style.display="flex",header.style.justifyContent="space-between",header.style.alignItems="center",header.style.marginBottom="20px";var title=document.createElement("div");title.textContent="Conhacks",title.style.fontWeight="bold",title.style.fontSize="20px";var byline=document.createElement("div");byline.textContent="by Ari",byline.style.fontSize="12px",byline.style.color="#777";var minimizeButton=document.createElement("button");minimizeButton.textContent="-",minimizeButton.style.fontSize="20px",minimizeButton.style.border="none",minimizeButton.style.backgroundColor="transparent",minimizeButton.style.color="#555",minimizeButton.style.cursor="pointer";var plusButton=document.createElement("button");plusButton.textContent="+",plusButton.style.fontSize="20px",plusButton.style.border="none",plusButton.style.backgroundColor="transparent",plusButton.style.color="#555",plusButton.style.cursor="pointer";var slotsContainer=document.createElement("div"),applyButton=document.createElement("button");applyButton.textContent="Apply",applyButton.style.padding="10px 20px",applyButton.style.border="none",applyButton.style.backgroundColor="#007bff",applyButton.style.color="#fff",applyButton.style.borderRadius="5px",applyButton.style.cursor="pointer",applyButton.style.width="100%";var scriptButton=document.createElement("button");function createSlot(){var e=document.createElement("div");e.style.marginBottom="20px";var t=document.createElement("select");t.style.marginBottom="10px",t.style.width="100%",t.style.padding="8px",t.style.border="1px solid #ccc",t.style.borderRadius="5px",t.style.fontSize="16px";["skip","force pronouns"].forEach((function(e){var n=document.createElement("option");n.value=e,n.textContent=e,t.appendChild(n)}));var n=document.createElement("select");n.style.width="100%",n.style.padding="8px",n.style.border="1px solid #ccc",n.style.borderRadius="5px",n.style.fontSize="16px";var r=document.createElement("option");r.value="1",r.textContent="True",n.appendChild(r);var o=document.createElement("option");return o.value="0",o.textContent="False",n.appendChild(o),e.appendChild(t),e.appendChild(n),e}scriptButton.textContent="Add Translation Script",scriptButton.style.padding="10px 20px",scriptButton.style.border="none",scriptButton.style.backgroundColor="#28a745",scriptButton.style.color="#fff",scriptButton.style.borderRadius="5px",scriptButton.style.cursor="pointer",scriptButton.style.width="100%",scriptButton.style.marginTop="10px",header.appendChild(title),header.appendChild(byline),header.appendChild(minimizeButton),header.appendChild(plusButton),container.appendChild(header),container.appendChild(slotsContainer),container.appendChild(applyButton),container.appendChild(scriptButton),document.body.appendChild(container),plusButton.addEventListener("click",(function(){var e=createSlot();slotsContainer.appendChild(e),container.style.height=container.clientHeight+50+"px"}));var initialSlot=createSlot();slotsContainer.appendChild(initialSlot),minimizeButton.addEventListener("click",(function(){container.style.display="none"===container.style.display?"block":"none"})),applyButton.addEventListener("click",(function(){slotsContainer.querySelectorAll("div").forEach((function(e){var t=e.querySelector("select").value,n=e.querySelector("select:nth-child(2)").value;settings[t]=parseInt(n)})),container.style.display="none"})),scriptButton.addEventListener("click",(function(){var script="\n    async function translateText(text, sourceLang, targetLang) {\n      const response = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${text}`);\n      const data = await response.json();\n      const translatedText = data[0][0][0];\n      return translatedText;\n    }\n    \n    async function insertTranslatedText(answerElementId, translatedText) {\n      const answerElement = document.getElementById(answerElementId);\n      \n      if (!answerElement) {\n        console.error(\"Element not found:\", answerElementId);\n        return;\n      }\n\n      // Apply the rules for inserting phrases at the beginning\n      const translatedTextTrimmed = translatedText.split('/')[0].trim();\n      let prefix = '';\n\n      if (translatedTextTrimmed.endsWith('a')) {\n        prefix = 'la ';\n      } else if (translatedTextTrimmed.endsWith('as')) {\n        prefix = 'las ';\n      } else if (translatedTextTrimmed.endsWith('es') || translatedTextTrimmed.endsWith('os')) {\n        prefix = 'los ';\n      } else if (translatedTextTrimmed.slice(-2, -1) === 'e' || translatedTextTrimmed.slice(-2, -1) === 'o' || translatedTextTrimmed.slice(-1) === 'e' || translatedTextTrimmed.slice(-1) === 'o') {\n        prefix = 'el ';\n      }\n\n      const textToInsert = prefix + translatedTextTrimmed;\n\n      answerElement.value = textToInsert;\n      console.log(\"Translated text inserted into answer input:\", textToInsert);\n      \n      answerElement.focus();\n      answerElement.select();\n      \n      var enterEvent = new KeyboardEvent('keydown', {\n        bubbles: true, cancelable: true, key: 'Enter', charCode: 13, keyCode: 13, which: 13\n      });\n      answerElement.dispatchEvent(enterEvent);\n    }\n    \n    async function translateAndInsertText(questionElementId, answerElementId, sourceLang, targetLang) {\n      const questionElement = document.getElementById(questionElementId);\n      \n      if (!questionElement) {\n        console.error(\"Element not found:\", questionElementId);\n        return;\n      }\n    \n      const text = questionElement.textContent.trim();\n      if (!text) {\n        console.error(\"No text found in element:\", questionElementId);\n        return;\n      }\n    \n      try {\n        const translatedText = await translateText(text, sourceLang, targetLang);\n        await insertTranslatedText(answerElementId, translatedText);\n      } catch (error) {\n        console.error(\"Translation error:\", error);\n        alert(\"Failed to translate text. Please try again later.\");\n      }\n    }\n    \n    async function runTranslation() {\n      await translateAndInsertText(\"question-input\", \"answer-input\", \"en\", \"es\");\n    }\n    \n    let keySequence = [];\n    document.addEventListener(\"keydown\", async function(event) {\n      keySequence.push(event.key);\n      if (keySequence.length > 2) {\n        keySequence.shift();\n      }\n      if (keySequence.join('') === 'tp') {\n        await runTranslation();\n        keySequence = [];\n      }\n    });\n    \n    runTranslation().then(() => console.log(\"Initial translation and insertion completed.\"));\n    ";eval(script)}))})();
